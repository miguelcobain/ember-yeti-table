{"version":3,"file":"filtering-utils.js","sources":["../../src/utils/filtering-utils.js"],"sourcesContent":["import { isEmpty } from '@ember/utils';\nimport { get } from '@ember/object';\n\nimport createRegex from './create-regex.js';\n\nfunction createColumnFilters(columns) {\n  let searcheableColumns = columns.filter(c => {\n    return !isEmpty(c.filter) || !isEmpty(c.filterFunction);\n  });\n\n  return searcheableColumns.map(c => {\n    let regex = createRegex(c.filter);\n\n    return row => {\n      let value = get(row, c.prop);\n      let passesRegex = true;\n\n      if (!isEmpty(c.filter)) {\n        passesRegex = regex.test(value);\n      }\n\n      let passesCustom = true;\n\n      if (!isEmpty(c.filterFunction)) {\n        passesCustom = c.filterFunction(value, c.filterUsing);\n      }\n\n      return passesRegex && passesCustom;\n    };\n  });\n}\n\nexport default function filterData(data, columns, globalFilter, filterFunction, filterUsing) {\n  if (isEmpty(data)) {\n    return [];\n  }\n\n  if (isEmpty(columns)) {\n    // bail out if there are no columns to filter\n    return data;\n  }\n\n  let globalRegex = createRegex(globalFilter, false, true, true);\n\n  let columnFilters = createColumnFilters(columns);\n\n  return data.filter(row => {\n    let passesGeneral = true;\n\n    if (!isEmpty(globalRegex)) {\n      passesGeneral = columns.some(c => {\n        return globalRegex.test(get(row, c.prop));\n      });\n    }\n\n    let passesColumn = true;\n\n    if (!isEmpty(columnFilters)) {\n      passesColumn = columnFilters.every(fn => fn(row));\n    }\n\n    let passesCustom = true;\n    if (!isEmpty(filterFunction)) {\n      passesColumn = filterFunction(row, filterUsing);\n    }\n\n    return passesGeneral && passesColumn && passesCustom;\n  });\n}\n"],"names":["createColumnFilters","columns","searcheableColumns","filter","c","isEmpty","filterFunction","map","regex","createRegex","row","value","get","prop","passesRegex","test","passesCustom","filterUsing","filterData","data","globalFilter","globalRegex","columnFilters","passesGeneral","some","passesColumn","every","fn"],"mappings":";;;;AAKA,SAASA,mBAAmBA,CAACC,OAAO,EAAE;AACpC,EAAA,IAAIC,kBAAkB,GAAGD,OAAO,CAACE,MAAM,CAACC,CAAC,IAAI;AAC3C,IAAA,OAAO,CAACC,OAAO,CAACD,CAAC,CAACD,MAAM,CAAC,IAAI,CAACE,OAAO,CAACD,CAAC,CAACE,cAAc,CAAC;AACzD,GAAC,CAAC;AAEF,EAAA,OAAOJ,kBAAkB,CAACK,GAAG,CAACH,CAAC,IAAI;AACjC,IAAA,IAAII,KAAK,GAAGC,WAAW,CAACL,CAAC,CAACD,MAAM,CAAC;AAEjC,IAAA,OAAOO,GAAG,IAAI;MACZ,IAAIC,KAAK,GAAGC,GAAG,CAACF,GAAG,EAAEN,CAAC,CAACS,IAAI,CAAC;MAC5B,IAAIC,WAAW,GAAG,IAAI;AAEtB,MAAA,IAAI,CAACT,OAAO,CAACD,CAAC,CAACD,MAAM,CAAC,EAAE;AACtBW,QAAAA,WAAW,GAAGN,KAAK,CAACO,IAAI,CAACJ,KAAK,CAAC;AACjC;MAEA,IAAIK,YAAY,GAAG,IAAI;AAEvB,MAAA,IAAI,CAACX,OAAO,CAACD,CAAC,CAACE,cAAc,CAAC,EAAE;QAC9BU,YAAY,GAAGZ,CAAC,CAACE,cAAc,CAACK,KAAK,EAAEP,CAAC,CAACa,WAAW,CAAC;AACvD;MAEA,OAAOH,WAAW,IAAIE,YAAY;KACnC;AACH,GAAC,CAAC;AACJ;AAEe,SAASE,UAAUA,CAACC,IAAI,EAAElB,OAAO,EAAEmB,YAAY,EAAEd,cAAc,EAAEW,WAAW,EAAE;AAC3F,EAAA,IAAIZ,OAAO,CAACc,IAAI,CAAC,EAAE;AACjB,IAAA,OAAO,EAAE;AACX;AAEA,EAAA,IAAId,OAAO,CAACJ,OAAO,CAAC,EAAE;AACpB;AACA,IAAA,OAAOkB,IAAI;AACb;EAEA,IAAIE,WAAW,GAAGZ,WAAW,CAACW,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;AAE9D,EAAA,IAAIE,aAAa,GAAGtB,mBAAmB,CAACC,OAAO,CAAC;AAEhD,EAAA,OAAOkB,IAAI,CAAChB,MAAM,CAACO,GAAG,IAAI;IACxB,IAAIa,aAAa,GAAG,IAAI;AAExB,IAAA,IAAI,CAAClB,OAAO,CAACgB,WAAW,CAAC,EAAE;AACzBE,MAAAA,aAAa,GAAGtB,OAAO,CAACuB,IAAI,CAACpB,CAAC,IAAI;AAChC,QAAA,OAAOiB,WAAW,CAACN,IAAI,CAACH,GAAG,CAACF,GAAG,EAAEN,CAAC,CAACS,IAAI,CAAC,CAAC;AAC3C,OAAC,CAAC;AACJ;IAEA,IAAIY,YAAY,GAAG,IAAI;AAEvB,IAAA,IAAI,CAACpB,OAAO,CAACiB,aAAa,CAAC,EAAE;MAC3BG,YAAY,GAAGH,aAAa,CAACI,KAAK,CAACC,EAAE,IAAIA,EAAE,CAACjB,GAAG,CAAC,CAAC;AACnD;IAEA,IAAIM,YAAY,GAAG,IAAI;AACvB,IAAA,IAAI,CAACX,OAAO,CAACC,cAAc,CAAC,EAAE;AAC5BmB,MAAAA,YAAY,GAAGnB,cAAc,CAACI,GAAG,EAAEO,WAAW,CAAC;AACjD;AAEA,IAAA,OAAOM,aAAa,IAAIE,YAAY,IAAIT,YAAY;AACtD,GAAC,CAAC;AACJ;;;;"}